{"version":3,"sources":["components/Loader.jsx","components/Gif.jsx","App.jsx","index.js"],"names":["Loader","className","Gif","useState","gifs","setGifs","isLoading","setIsLoading","isError","setIsError","query","setQuery","useEffect","getGifs","a","axios","params","api_key","limit","result","data","setTimeout","role","renderError","onSubmit","e","preventDefault","q","fetchGifs","value","onChange","target","type","placeholder","map","gif","src","images","fixed_height","url","alt","title","id","App","ReactDom","render","document","getElementById"],"mappings":"0NAkBeA,EATA,WACX,OACA,sBAAKC,UAAU,qBAAf,UACI,mBAAGA,UAAU,iCACb,4FC4HOC,EApIH,WAGR,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAA0BN,mBAAS,IAAnC,mBAAOO,EAAP,KAAcC,EAAd,KAQAC,qBAAY,WACR,IAAMC,EAAO,uCAAG,4BAAAC,EAAA,6DACZL,GAAW,GACXF,GAAa,GAFD,kBAIaQ,IAAM,yCAA0C,CACrEC,OAAQ,CAEJC,QAAS,mCACTC,MAAO,MARH,OAIFC,EAJE,OAWRd,EAAQc,EAAOC,KAAKA,MAXZ,gDAaRX,GAAW,GACXY,YAAW,kBAAMZ,GAAW,KAAQ,KAd5B,QAgBZF,GAAa,GAhBD,yDAAH,qDAkBbc,WAAWR,EAAS,QACrB,IAkFH,OACI,sBAAKZ,UAAU,cAAf,UAjDgB,WAChB,GAAIO,EACA,OACI,qBAAKP,UAAU,qBAAqBqB,KAAK,QAAzC,sDA+CHC,GACD,uBAAMC,SA3BO,SAACC,GAClBA,EAAEC,iBACa,uCAAG,4BAAAZ,EAAA,6DACdL,GAAW,GACXF,GAAa,GAFC,kBAIWQ,IAAM,uCAAwC,CACnEC,OAAQ,CACJC,QAAS,mCACTU,EAAGjB,EACHQ,MAAO,MARD,OAIJC,EAJI,OAWVd,EAAQc,EAAOC,KAAKA,MAXV,gDAaVX,GAAW,GACXY,YAAW,kBAAMZ,GAAW,KAAQ,KAd1B,QAgBdF,GAAa,GAhBC,yDAAH,oDAkBfqB,GACAjB,EAAS,KAMyBV,UAAU,yCAAxC,UACI,uBAAO4B,MAAOnB,EAAOoB,SAzCP,SAACL,GACvBd,EAASc,EAAEM,OAAOF,QAwCwCG,KAAK,OAAO/B,UAAU,eAAegC,YAAY,WACnG,wBAAQhC,UAAU,kBAAlB,SACI,mBAAGA,UAAU,uBAGrB,8BAjFAK,EAEI,qBAAKL,UAAU,iBAAf,SACI,cAAC,EAAD,MAILG,EAAK8B,KAAI,SAAAC,GACZ,OACI,qBAEAlC,UAAU,uGAFV,SAII,qBAAKmC,IAAKD,EAAIE,OAAOC,aAAaC,IAAKC,IAAKL,EAAIM,SAH/CN,EAAIO,aCjDVC,G,MANH,WACR,OACI,cAAC,EAAD,MCFRC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.94706d9e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n/**\r\n * \r\n * Here I am simply using font-awesome icons library\r\n * to create a Loader component using loading spinner.\r\n * and rendering it in the Gif component wherever needed.\r\n */\r\nconst Loader = () => {\r\n    return (\r\n    <div className=\"loader text-center\">\r\n        <i className=\"fas fa-spinner fa-8x fa-spin\"></i>\r\n        <h3>Please wait while we load some amazing gifs for you...</h3>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Loader;","import React, {useEffect, useReducer, useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Loader from './Loader';\r\n\r\nconst Gif = () => {\r\n\r\n    //state hooks\r\n    const [gifs, setGifs] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isError, setIsError] = useState(false);\r\n    const [query, setQuery] = useState(\"\");\r\n    \r\n    /** using effect hook with axios to make\r\n     * calls to giphy api. If there is an error I am using an self destructing \r\n     * alert to let user know what happend\r\n     * otherwise loading spinner is shown until\r\n     * the data is returned and shown.\r\n    */ \r\n    useEffect ( () => {\r\n        const getGifs = async () => {\r\n            setIsError(false);\r\n            setIsLoading(true);\r\n            try {\r\n                const result = await axios(\"https://api.giphy.com/v1/gifs/trending\", {\r\n                params: {\r\n                    //using api key as a string rather than env file for testing purpose.\r\n                    api_key: \"IggGghGLeJjTZ77naApETTp3AhGPjPOt\",\r\n                    limit: 48\r\n                }\r\n                });\r\n                setGifs(result.data.data);\r\n            } catch (error) {\r\n                setIsError(true);\r\n                setTimeout(() => setIsError(false), 3000);\r\n            }\r\n            setIsLoading(false);\r\n        }\r\n        setTimeout(getGifs, 1500);\r\n    }, []);\r\n\r\n    /**\r\n     * renderGifs method first checks to see if \r\n     * the isLoading state is set to true\r\n     * if so the loading componenet is rendered\r\n     * if not then it renders gifs returned by \r\n     * the the fetch api call. \r\n     */\r\n    const renderGifs = () => {\r\n        if (isLoading) {\r\n            return (\r\n                <div className=\"main-container\">\r\n                    <Loader />\r\n                </div>\r\n            )\r\n        }\r\n        return gifs.map(gif => {\r\n            return (\r\n                <div \r\n                key={gif.id} \r\n                className=\"gif col-lg-2 col-md-3 col-sm-4 col-xs-6 d-flex flex-column justify-content-center align-items-center\"\r\n                >\r\n                    <img src={gif.images.fixed_height.url} alt={gif.title} />\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    /** \r\n     * In renderError method if the isError state is set to true\r\n     * then I am alerting the user that there has been an issue to fetch the data\r\n     * and they should try again.\r\n    */\r\n    const renderError = () => {\r\n        if (isError) {\r\n            return (\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                    Problem get gifs, please again in a bit.\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    //making the input/search field a controlled input\r\n    const handleInputChange = (e) => {\r\n        setQuery(e.target.value);\r\n    }\r\n\r\n\r\n\r\n    /** \r\n     * I am doing a similar api calls to fetch gifs \r\n     * but this time the gifs are being searched with whatever \r\n     * user types in the search box. Resulting gifs/images are being \r\n     * used to set the initial state of gifs. And eventually renderd on the page\r\n    */\r\n\r\n    const handleSearch = (e) => {\r\n        e.preventDefault();\r\n        const fetchGifs = async () => {\r\n            setIsError(false);\r\n            setIsLoading(true);\r\n            try {\r\n                const result = await axios(\"https://api.giphy.com/v1/gifs/search\", {\r\n                params: {\r\n                    api_key: \"IggGghGLeJjTZ77naApETTp3AhGPjPOt\",\r\n                    q: query,\r\n                    limit: 48\r\n                }\r\n                });\r\n                setGifs(result.data.data);\r\n            } catch (error) {\r\n                setIsError(true);\r\n                setTimeout(() => setIsError(false), 3000);\r\n            }\r\n            setIsLoading(false);\r\n        }\r\n        fetchGifs();\r\n        setQuery(\"\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"text-center\">\r\n            {renderError()}\r\n            <form onSubmit={handleSearch} className=\"form-inline justify-content-center m-2\">\r\n                <input value={query} onChange={handleInputChange} type=\"text\" className=\"form-control\" placeholder=\"Search\"/>\r\n                <button className=\"btn btn-primary\">\r\n                    <i className=\"fas fa-search\"></i>\r\n                </button>\r\n            </form>\r\n            <div>\r\n                {renderGifs()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Gif;","import React from 'react';\r\nimport Gif from './components/Gif';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n    return (\r\n        <Gif />\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDom.render(<App />, document.getElementById('root'));"],"sourceRoot":""}